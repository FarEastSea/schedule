# This is a basic workflow to help you get started with Actions

name: VPN Sever

run-name: UpdataVPN deploy to ${{ inputs.deploy_target }} by @${{ github.actor }}
# Controls when the workflow will run
on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'
    - cron: '0 13 * * *'
    
  # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  VPN_GET_AND_SAVE:
    name: Update URL
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.AUTO_UPDATA }}
      
      - name: Check file
        run: |
          path='.pycache'
          if [ ! -e $path ]; then
            touch $path
          fi
      
      - name: Cache node modules
        id: cache-python
        uses: actions/cache@v3
        env:
          cache-name: cache-python-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            .pycache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
          enableCrossOsArchive: false

      - if: ${{ steps.cache-python.outputs.cache-hit != false }}
        name: List the state of node modules
        continue-on-error: true
        run: |
          npm list
          echo 'pip list'
          pip list
      
      - name: install dependencies
        continue-on-error: true
        run: |
          pwd
          echo ~
          pip install -r requirements.txt

      # Runs a single command using the runners shell
      - name: Good morning in the morning!
        if: github.event.schedule == '0 0 * * *'
        run: echo Good morning, world!

     # check file is or not modified ? 
#         git diff --exist-code HEAD^
#         if [ $? -eq 0 ]; then
#             exit()
#         fi

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          python program/UpdataUrl.py
          git config --global user.name ${{ secrets.user_name }}
          git config --global user.email ${{ secrets.user_email }}
          git add yaml/.
          git commit -m 'Update Daily' && git push || echo "Source has not updata."
          
